/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/gameControl.js":
/*!****************************!*\
  !*** ./src/gameControl.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ship__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ship */ \"./src/ship.js\");\n/* harmony import */ var _ships__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ships */ \"./src/ships.js\");\n\n\n\nconst initializeControl = (() => {\n\t//global elements\n\tconst width = 10;\n\t//user elements\n\tconst userGrid = document.querySelector('.grid-user');\n\tconst userSquares = [];\n\t//computer elements\n\tconst computerGrid = document.querySelector('.grid-computer');\n\tconst computerSquares = [];\n\t//ships elements\n\tconst shipArray = [];\n\tlet destroyerHorizontal = true;\n\tlet submarineHorizontal = true;\n\tlet cruiserHorizontal = true;\n\tlet battleshipHorizontal = true;\n\tlet carrierHorizontal = true;\n\tlet selectedShipClassName;\n\tlet draggedShip;\n\tlet draggedShipLength;\n\n\t//create gameboard grid feature\n\tconst createGameboard = (user, squares) => {\n\t\tfor (let i = 0; i < width * width; i++) {\n\t\t\tconst square = document.createElement('div');\n\t\t\tsquare.dataset.id = i;\n\t\t\tuser.appendChild(square);\n\t\t\tsquares.push(square);\n\t\t}\n\t};\n\n\t//render ship feature\n\tconst renderShip = () => {\n\t\tconst displayShipContainer = document.querySelector('.garage-container');\n\t\t_ships__WEBPACK_IMPORTED_MODULE_1__.ships.forEach((ship) => {\n\t\t\tconst name = ship.name;\n\t\t\tconst dir1 = ship.directions[0];\n\t\t\tconst dir2 = ship.directions[1].map((element) => {\n\t\t\t\treturn element * width;\n\t\t\t});\n\t\t\tconst obj = createShip(name, [dir1, dir2]);\n\n\t\t\t//display;\n\t\t\tconst shipContainer = document.createElement('div');\n\t\t\tshipContainer.classList.add('ship', `${name}-container`);\n\t\t\tshipContainer.style.width = `${ship.directions[1].length * 5}vmin`;\n\t\t\tshipContainer.style.height = `5vmin`;\n\t\t\tshipContainer.draggable = 'true';\n\t\t\tfor (let y = 0; y < ship.directions[0].length; y++) {\n\t\t\t\tconst shipDiv = document.createElement('div');\n\t\t\t\tshipDiv.classList.add(`${name}-${y}`);\n\t\t\t\tshipContainer.appendChild(shipDiv);\n\t\t\t}\n\t\t\tshipContainer.firstChild.innerText = '⇲';\n\t\t\tshipContainer.lastChild.innerText = '↻';\n\t\t\tshipContainer.lastChild.addEventListener('click', (event) => {\n\t\t\t\trotateShip(event);\n\t\t\t});\n\n\t\t\tshipContainer.addEventListener('mousedown', (event) => {\n\t\t\t\tselectedShipClassName = event.target.className;\n\t\t\t});\n\t\t\tshipContainer.addEventListener('dragstart', dragStart);\n\t\t\tshipContainer.addEventListener('dragend', dragEnd);\n\n\t\t\tdisplayShipContainer.appendChild(shipContainer);\n\n\t\t\tshipArray.push(obj);\n\t\t});\n\t\treturn shipArray;\n\t};\n\n\t//create ship feature\n\tconst createShip = (name, dir) => {\n\t\tlet ship = Object.create(_ship__WEBPACK_IMPORTED_MODULE_0__.default.prototype);\n\t\tship.name = name;\n\t\tship.directions = dir;\n\t\treturn ship;\n\t};\n\n\t// set one ship in random location feature\n\tconst setShipAtRandomLocation = (playerSquares, ship) => {\n\t\tlet direction;\n\t\tlet randomDirectionOfShip = Math.floor(\n\t\t\tMath.random() * ship.directions.length\n\t\t);\n\t\tlet current = ship.directions[randomDirectionOfShip];\n\t\tif (randomDirectionOfShip === 0) direction = 1;\n\t\tif (randomDirectionOfShip === 1) direction = 10;\n\n\t\tlet randomStartInGrid = Math.abs(\n\t\t\tMath.floor(\n\t\t\t\tMath.random() * playerSquares.length -\n\t\t\t\t\tship.directions[0].length * direction\n\t\t\t)\n\t\t);\n\n\t\t// square taken on computer grid\n\t\tconst squareIsTakenOnGrid = current.some((index) =>\n\t\t\tplayerSquares[randomStartInGrid + index].classList.contains('taken')\n\t\t);\n\t\t// square is at extreme left of the computer grid\n\t\tconst squareIsAtLeftEdge = current.some(\n\t\t\t(index) => (randomStartInGrid + index) % width === 0\n\t\t);\n\t\t// square is at extreme right of the computer grid\n\t\tconst squareIsAtRightEdge = current.some(\n\t\t\t(index) => (randomStartInGrid + index) % width === width - 1\n\t\t);\n\n\t\t// check grid and place ship\n\t\tif (!squareIsTakenOnGrid && !squareIsAtLeftEdge && !squareIsAtRightEdge) {\n\t\t\tcurrent.forEach((index) => {\n\t\t\t\tplayerSquares[randomStartInGrid + index].classList.add(\n\t\t\t\t\t'taken',\n\t\t\t\t\tship.name\n\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\t// start again\n\t\t\tsetShipAtRandomLocation(playerSquares, ship);\n\t\t}\n\t};\n\n\t// generate random locations of all ships of computer feature\n\tconst generateRandomLocation = () => {\n\t\tsetShipAtRandomLocation(computerSquares, shipArray[0]);\n\t\tsetShipAtRandomLocation(computerSquares, shipArray[1]);\n\t\tsetShipAtRandomLocation(computerSquares, shipArray[2]);\n\t\tsetShipAtRandomLocation(computerSquares, shipArray[3]);\n\t\tsetShipAtRandomLocation(computerSquares, shipArray[4]);\n\t};\n\n\t// rotate user ships feature\n\tconst rotateShip = (event) => {\n\t\tconst name = event.target.parentNode.className\n\t\t\t.replace('-container', '')\n\t\t\t.replace('ship', '')\n\t\t\t.replace(' ', '');\n\t\tconst nameHorizontal = `${name}Horizontal`;\n\t\tif (nameHorizontal === 'destroyerHorizontal') {\n\t\t\tif (destroyerHorizontal) {\n\t\t\t\tevent.target.parentNode.style.height = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.width = '5vmin';\n\t\t\t\tdestroyerHorizontal = false;\n\t\t\t\treturn;\n\t\t\t} else if (!destroyerHorizontal) {\n\t\t\t\tevent.target.parentNode.style.width = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.height = '5vmin';\n\t\t\t\tdestroyerHorizontal = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (nameHorizontal === 'submarineHorizontal') {\n\t\t\tif (submarineHorizontal) {\n\t\t\t\tevent.target.parentNode.style.height = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.width = '5vmin';\n\t\t\t\tsubmarineHorizontal = false;\n\t\t\t\treturn;\n\t\t\t} else if (!submarineHorizontal) {\n\t\t\t\tevent.target.parentNode.style.width = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.height = '5vmin';\n\t\t\t\tsubmarineHorizontal = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (nameHorizontal === 'cruiserHorizontal') {\n\t\t\tif (cruiserHorizontal) {\n\t\t\t\tevent.target.parentNode.style.height = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.width = '5vmin';\n\t\t\t\tcruiserHorizontal = false;\n\t\t\t\treturn;\n\t\t\t} else if (!cruiserHorizontal) {\n\t\t\t\tevent.target.parentNode.style.width = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.height = '5vmin';\n\t\t\t\tcruiserHorizontal = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (nameHorizontal === 'battleshipHorizontal') {\n\t\t\tif (battleshipHorizontal) {\n\t\t\t\tevent.target.parentNode.style.height = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.width = '5vmin';\n\t\t\t\tbattleshipHorizontal = false;\n\t\t\t\treturn;\n\t\t\t} else if (!battleshipHorizontal) {\n\t\t\t\tevent.target.parentNode.style.width = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.height = '5vmin';\n\t\t\t\tbattleshipHorizontal = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (nameHorizontal === 'carrierHorizontal') {\n\t\t\tif (carrierHorizontal) {\n\t\t\t\tevent.target.parentNode.style.height = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.width = '5vmin';\n\t\t\t\tcarrierHorizontal = false;\n\t\t\t\treturn;\n\t\t\t} else if (!carrierHorizontal) {\n\t\t\t\tevent.target.parentNode.style.width = `${\n\t\t\t\t\tevent.target.parentNode.childNodes.length * 5\n\t\t\t\t}vmin`;\n\t\t\t\tevent.target.parentNode.style.height = '5vmin';\n\t\t\t\tcarrierHorizontal = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t};\n\n\t//render gameboard\n\tconst renderGameboard = () => {\n\t\tcreateGameboard(userGrid, userSquares);\n\t\tcreateGameboard(computerGrid, computerSquares);\n\t\trenderShip();\n\t\tuserSquares.forEach((square) => {\n\t\t\tsquare.addEventListener('dragstart', dragStart);\n\t\t});\n\t\tuserSquares.forEach((square) => {\n\t\t\tsquare.addEventListener('dragover', dragOver);\n\t\t});\n\t\tuserSquares.forEach((square) => {\n\t\t\tsquare.addEventListener('dragenter', dragEnter);\n\t\t});\n\t\tuserSquares.forEach((square) => {\n\t\t\tsquare.addEventListener('dragleave', dragLeave);\n\t\t});\n\t\tuserSquares.forEach((square) => {\n\t\t\tsquare.addEventListener('drop', (event) => {\n\t\t\t\tdragDrop(event);\n\t\t\t});\n\t\t});\n\t\tuserSquares.forEach((square) => {\n\t\t\tsquare.addEventListener('dragend', dragEnd);\n\t\t});\n\t};\n\n\t// darg and drop feature\n\tconst dragStart = (event) => {\n\t\tdraggedShip = event.target;\n\t\tdraggedShipLength = draggedShip.childNodes.length;\n\t\tdraggedShip.classList.add('dragging');\n\t};\n\n\tconst dragOver = (event) => {\n\t\tevent.preventDefault();\n\t};\n\n\tconst dragEnter = (event) => {\n\t\tevent.preventDefault();\n\t};\n\n\tconst dragLeave = () => {};\n\n\tconst dragDrop = (event) => {\n\t\tconst displayShipContainer = document.querySelector('.garage-container');\n\t\tlet lastChildOfShipClassName = draggedShip.lastChild.className;\n\t\tlet shipClassName = lastChildOfShipClassName.slice(0, -2);\n\t\tlet lastChildShipIndex = parseInt(lastChildOfShipClassName.substr(-1));\n\t\tlet shipLastId = lastChildShipIndex + parseInt(event.target.dataset.id);\n\t\tlet selectedShipIndex = parseInt(lastChildOfShipClassName.substr(-1));\n\t\tshipLastId = shipLastId - selectedShipIndex;\n\n\t\tif (event.target.classList.contains('taken')) {\n\t\t\treturn;\n\t\t} else {\n\t\t\tif (shipClassName === 'destroyer') {\n\t\t\t\tif (destroyerHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[\n\t\t\t\t\t\t\t// parseInt(event.target.dataset.id) - selectedShipIndex + i\n\t\t\t\t\t\t\tparseInt(event.target.dataset.id) + i\n\t\t\t\t\t\t].classList.add('taken', shipClassName);\n\t\t\t\t\t}\n\t\t\t\t} else if (!destroyerHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[\n\t\t\t\t\t\t\t// parseInt(event.target.dataset.id) - selectedShipIndex + width * i\n\t\t\t\t\t\t\tparseInt(event.target.dataset.id) + width * i\n\t\t\t\t\t\t].classList.add('taken', shipClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (shipClassName === 'submarine') {\n\t\t\t\tif (submarineHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[parseInt(event.target.dataset.id) + i].classList.add(\n\t\t\t\t\t\t\t'taken',\n\t\t\t\t\t\t\tshipClassName\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (!submarineHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[\n\t\t\t\t\t\t\tparseInt(event.target.dataset.id) + width * i\n\t\t\t\t\t\t].classList.add('taken', shipClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (shipClassName === 'cruiser') {\n\t\t\t\tif (cruiserHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[parseInt(event.target.dataset.id) + i].classList.add(\n\t\t\t\t\t\t\t'taken',\n\t\t\t\t\t\t\tshipClassName\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (!cruiserHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[\n\t\t\t\t\t\t\tparseInt(event.target.dataset.id) + width * i\n\t\t\t\t\t\t].classList.add('taken', shipClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (shipClassName === 'battleship') {\n\t\t\t\tif (battleshipHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[parseInt(event.target.dataset.id) + i].classList.add(\n\t\t\t\t\t\t\t'taken',\n\t\t\t\t\t\t\tshipClassName\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (!battleshipHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[\n\t\t\t\t\t\t\tparseInt(event.target.dataset.id) + width * i\n\t\t\t\t\t\t].classList.add('taken', shipClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (shipClassName === 'carrier') {\n\t\t\t\tif (carrierHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[parseInt(event.target.dataset.id) + i].classList.add(\n\t\t\t\t\t\t\t'taken',\n\t\t\t\t\t\t\tshipClassName\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if (!carrierHorizontal) {\n\t\t\t\t\tfor (let i = 0; i < draggedShipLength; i++) {\n\t\t\t\t\t\tuserSquares[\n\t\t\t\t\t\t\tparseInt(event.target.dataset.id) + width * i\n\t\t\t\t\t\t].classList.add('taken', shipClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else return;\n\t\t}\n\t\tdisplayShipContainer.removeChild(draggedShip);\n\t\tif (isEmpty(displayShipContainer)) {\n\t\t\tconst btnStartGame = document.querySelector('.btn-start-game');\n\t\t\tbtnStartGame.classList.remove('hide');\n\t\t}\n\t};\n\n\tconst dragEnd = () => {\n\t\tdraggedShip.classList.remove('dragging');\n\t};\n\n\tconst isEmpty = (elem) => {\n\t\treturn elem.innerHTML.trim() == '';\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t//game logic feature\n\n\t// DOM\n\tconst userDetailsDisplay = document.querySelector('#user-details');\n\tconst computerDetailsDisplay = document.querySelector('#computer-details');\n\tconst startBtn = document.querySelector('#start');\n\tconst finalDisplay = document.querySelector('.final-screen');\n\tconst finalText = document.getElementById('winning-text');\n\n\t//global variables\n\tlet gameOver = false;\n\tlet currentPlayer = 'user';\n\tlet winner = false;\n\t//user ships life\n\tlet userDestroyerLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[0].life;\n\tlet userSubmarineLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[1].life;\n\tlet userCruiserLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[2].life;\n\tlet userBattleshipLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[3].life;\n\tlet userCarrierLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[4].life;\n\t//computer ships life\n\tlet cpuDestroyerLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[0].life;\n\tlet cpuSubmarineLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[1].life;\n\tlet cpuCruiserLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[2].life;\n\tlet cpuBattleshipLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[3].life;\n\tlet cpuCarrierLife = _ships__WEBPACK_IMPORTED_MODULE_1__.ships[4].life;\n\n\tconst playGame = () => {\n\t\tif (currentPlayer === 'user') {\n\t\t\tcomputerSquares.forEach((square) =>\n\t\t\t\tsquare.addEventListener('click', function (e) {\n\t\t\t\t\trevealMissOrHit(square);\n\t\t\t\t})\n\t\t\t);\n\t\t} else if (currentPlayer === 'computer') {\n\t\t\tsetTimeout(computerPlay(), 1000);\n\t\t}\n\t\tif (gameOver) {\n\t\t\treturn;\n\t\t}\n\t};\n\n\tconst revealMissOrHit = (target) => {\n\t\tif (\n\t\t\ttarget.classList.contains('taken') &&\n\t\t\t!target.classList.contains('hit') &&\n\t\t\t!target.classList.contains('miss')\n\t\t) {\n\t\t\ttarget.classList.add('hit');\n\t\t\tif (target.classList.contains('destroyer')) cpuDestroyerLife--;\n\t\t\tif (target.classList.contains('submarine')) cpuSubmarineLife--;\n\t\t\tif (target.classList.contains('cruiser')) cpuCruiserLife--;\n\t\t\tif (target.classList.contains('battleship')) cpuBattleshipLife--;\n\t\t\tif (target.classList.contains('carrier')) cpuCarrierLife--;\n\t\t} else if (\n\t\t\t!target.classList.contains('taken') &&\n\t\t\t!target.classList.contains('hit') &&\n\t\t\t!target.classList.contains('miss')\n\t\t) {\n\t\t\ttarget.classList.add('miss');\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tcheckWinner();\n\t\tcurrentPlayer = 'computer';\n\t\tplayGame();\n\t};\n\n\tconst computerPlay = () => {\n\t\tlet randomSquareGuess = Math.floor(Math.random() * userSquares.length);\n\t\tif (\n\t\t\tuserSquares[randomSquareGuess].classList.contains('taken') &&\n\t\t\t!userSquares[randomSquareGuess].classList.contains('hit') &&\n\t\t\t!userSquares[randomSquareGuess].classList.contains('miss')\n\t\t) {\n\t\t\tuserSquares[randomSquareGuess].classList.add('hit');\n\t\t\tif (userSquares[randomSquareGuess].classList.contains('destroyer'))\n\t\t\t\tuserDestroyerLife--;\n\t\t\tif (userSquares[randomSquareGuess].classList.contains('submarine'))\n\t\t\t\tuserSubmarineLife--;\n\t\t\tif (userSquares[randomSquareGuess].classList.contains('cruiser'))\n\t\t\t\tuserCruiserLife--;\n\t\t\tif (userSquares[randomSquareGuess].classList.contains('battleship'))\n\t\t\t\tuserBattleshipLife--;\n\t\t\tif (userSquares[randomSquareGuess].classList.contains('carrier'))\n\t\t\t\tuserCarrierLife--;\n\t\t\tcheckWinner();\n\t\t} else if (\n\t\t\t!userSquares[randomSquareGuess].classList.contains('taken') &&\n\t\t\t!userSquares[randomSquareGuess].classList.contains('hit') &&\n\t\t\t!userSquares[randomSquareGuess].classList.contains('miss')\n\t\t) {\n\t\t\tuserSquares[randomSquareGuess].classList.add('miss');\n\t\t\tcheckWinner();\n\t\t} else {\n\t\t\tcomputerPlay();\n\t\t}\n\t\tcurrentPlayer = 'user';\n\t};\n\n\tconst checkWinner = () => {\n\t\t//computer lose\n\t\tif (cpuDestroyerLife === 0) {\n\t\t\tconst destroyerSpan =\n\t\t\t\tcomputerDetailsDisplay.querySelector('[data-destroyer]');\n\t\t\tdestroyerSpan.classList.add('line');\n\n\t\t\tconst destroyer = computerGrid.querySelectorAll('.destroyer');\n\t\t\tdestroyer.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (cpuSubmarineLife === 0) {\n\t\t\tconst submarineSpan =\n\t\t\t\tcomputerDetailsDisplay.querySelector('[data-submarine]');\n\t\t\tsubmarineSpan.classList.add('line');\n\n\t\t\tconst submarine = computerGrid.querySelectorAll('.submarine');\n\t\t\tsubmarine.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (cpuCruiserLife === 0) {\n\t\t\tconst cruiserSpan =\n\t\t\t\tcomputerDetailsDisplay.querySelector('[data-cruiser]');\n\t\t\tcruiserSpan.classList.add('line');\n\n\t\t\tconst cruiser = computerGrid.querySelectorAll('.cruiser');\n\t\t\tcruiser.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (cpuBattleshipLife === 0) {\n\t\t\tconst battleshipSpan =\n\t\t\t\tcomputerDetailsDisplay.querySelector('[data-battleship]');\n\t\t\tbattleshipSpan.classList.add('line');\n\n\t\t\tconst battleship = computerGrid.querySelectorAll('.battleship');\n\t\t\tbattleship.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (cpuCarrierLife === 0) {\n\t\t\tconst carrierSpan =\n\t\t\t\tcomputerDetailsDisplay.querySelector('[data-carrier]');\n\t\t\tcarrierSpan.classList.add('line');\n\n\t\t\tconst carrier = computerGrid.querySelectorAll('.carrier');\n\t\t\tcarrier.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\t//user lose\n\t\tif (userDestroyerLife === 0) {\n\t\t\tconst destroyerSpan =\n\t\t\t\tuserDetailsDisplay.querySelector('[data-destroyer]');\n\t\t\tdestroyerSpan.classList.add('line');\n\t\t\tconst destroyer = userGrid.querySelectorAll('.destroyer');\n\t\t\tdestroyer.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (userSubmarineLife === 0) {\n\t\t\tconst submarineSpan =\n\t\t\t\tuserDetailsDisplay.querySelector('[data-submarine]');\n\t\t\tsubmarineSpan.classList.add('line');\n\n\t\t\tconst submarine = userGrid.querySelectorAll('.submarine');\n\t\t\tsubmarine.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (userCruiserLife === 0) {\n\t\t\tconst cruiserSpan = userDetailsDisplay.querySelector('[data-cruiser]');\n\t\t\tcruiserSpan.classList.add('line');\n\n\t\t\tconst cruiser = userGrid.querySelectorAll('.cruiser');\n\t\t\tcruiser.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (userBattleshipLife === 0) {\n\t\t\tconst battleshipSpan =\n\t\t\t\tuserDetailsDisplay.querySelector('[data-battleship]');\n\t\t\tbattleshipSpan.classList.add('line');\n\n\t\t\tconst battleship = userGrid.querySelectorAll('.battleship');\n\t\t\tbattleship.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (userCarrierLife === 0) {\n\t\t\tconst carrierSpan = userDetailsDisplay.querySelector('[data-carrier]');\n\t\t\tcarrierSpan.classList.add('line');\n\n\t\t\tconst carrier = userGrid.querySelectorAll('.carrier');\n\t\t\tcarrier.forEach((element) => {\n\t\t\t\telement.classList.add('sunk');\n\t\t\t});\n\t\t}\n\t\tif (\n\t\t\tcpuDestroyerLife +\n\t\t\t\tcpuSubmarineLife +\n\t\t\t\tcpuCruiserLife +\n\t\t\t\tcpuBattleshipLife +\n\t\t\t\tcpuCarrierLife ===\n\t\t\t0\n\t\t) {\n\t\t\tuserDetailsDisplay.innerHTML = 'YOU WIN!';\n\t\t\twinner = 'YOU';\n\t\t\tsetGameOver(winner);\n\t\t}\n\t\tif (\n\t\t\tuserDestroyerLife +\n\t\t\t\tuserSubmarineLife +\n\t\t\t\tuserCruiserLife +\n\t\t\t\tuserBattleshipLife +\n\t\t\t\tuserCarrierLife <=\n\t\t\t0\n\t\t) {\n\t\t\tinfoDetailsDisplay.innerText = 'COMPUTER WIN!';\n\t\t\twinner = 'COMPUTER';\n\t\t\tsetGameOver(winner);\n\t\t}\n\t};\n\n\tconst setGameOver = (winner) => {\n\t\tgameOver = true;\n\t\tstartBtn.removeEventListener('click', playGame());\n\t\tshowFinalScreen(winner);\n\t};\n\n\tconst showFinalScreen = (winner) => {\n\t\tfinalDisplay.classList.add('show');\n\t\tfinalText.innerHTML = `${winner} won the battle!`;\n\t};\n\n\tconst openGame = () => {\n\t\tconst container = document.querySelector('.container');\n\t\tcontainer.classList.add('show');\n\t\tconst infoContainer = document.querySelector('.info-container');\n\t\tinfoContainer.classList.add('show');\n\t\tconst garageContainer = document.querySelector('.garage-container');\n\t\tgarageContainer.classList.add('show');\n\t\tconst startScreen = document.querySelector('.start-screen');\n\t\tstartScreen.classList.add('hide');\n\t};\n\n\tconst startGame = (event) => {\n\t\tgenerateRandomLocation();\n\t\tplayGame();\n\t\tconst btnContainer = document.querySelector('.btn-container');\n\t\tbtnContainer.classList.add('hide');\n\t\tconst garageContainer = document.querySelector('.garage-container');\n\t\tgarageContainer.classList.remove('show');\n\t};\n\n\treturn {\n\t\trenderGameboard,\n\t\topenGame,\n\t\tstartGame,\n\t};\n})();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initializeControl);\n\n\n//# sourceURL=webpack://battleship/./src/gameControl.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gameControl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameControl */ \"./src/gameControl.js\");\n\n\n_gameControl__WEBPACK_IMPORTED_MODULE_0__.default.renderGameboard();\n\n//event listeners\nconst openBtn = document.querySelector('#open');\nopenBtn.addEventListener('click', _gameControl__WEBPACK_IMPORTED_MODULE_0__.default.openGame);\n\nconst startBtn = document.querySelector('#start');\nstartBtn.addEventListener('click', _gameControl__WEBPACK_IMPORTED_MODULE_0__.default.startGame);\n\nconst reloadBtn = document.querySelector('#reload');\nreloadBtn.addEventListener('click', () => {\n\tlocation.reload();\n});\n\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ }),

/***/ "./src/ship.js":
/*!*********************!*\
  !*** ./src/ship.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Ship {\n\tconstructor(shipData) {\n\t\tthis._name = shipData.name;\n\t\tthis._directions = shipData.directions || [];\n\t}\n\n\tget name() {\n\t\treturn this._name;\n\t}\n\tset name(value) {\n\t\tthis._name = value.toString();\n\t}\n\n\tget directions() {\n\t\treturn this._directions;\n\t}\n\tset directions(value) {\n\t\tthis._directions = value;\n\t}\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ship);\n\n\n//# sourceURL=webpack://battleship/./src/ship.js?");

/***/ }),

/***/ "./src/ships.js":
/*!**********************!*\
  !*** ./src/ships.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ships\": () => (/* binding */ ships)\n/* harmony export */ });\nconst ships = [\n\t{\n\t\tname: 'destroyer',\n\t\tdirections: [\n\t\t\t[0, 1],\n\t\t\t[0, 1],\n\t\t],\n\t\tlife: 2,\n\t},\n\t{\n\t\tname: 'submarine',\n\t\tdirections: [\n\t\t\t[0, 1, 2],\n\t\t\t[0, 1, 2],\n\t\t],\n\t\tlife: 3,\n\t},\n\t{\n\t\tname: 'cruiser',\n\t\tdirections: [\n\t\t\t[0, 1, 2],\n\t\t\t[0, 1, 2],\n\t\t],\n\t\tlife: 3,\n\t},\n\t{\n\t\tname: 'battleship',\n\t\tdirections: [\n\t\t\t[0, 1, 2, 3],\n\t\t\t[0, 1, 2, 3],\n\t\t],\n\t\tlife: 4,\n\t},\n\t{\n\t\tname: 'carrier',\n\t\tdirections: [\n\t\t\t[0, 1, 2, 3, 4],\n\t\t\t[0, 1, 2, 3, 4],\n\t\t],\n\t\tlife: 5,\n\t},\n];\n\n\n//# sourceURL=webpack://battleship/./src/ships.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;